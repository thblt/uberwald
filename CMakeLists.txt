cmake_minimum_required (VERSION 3.8)
project (Uberwald C)

set (UBW_VERSION_MAJOR 0)
set (UBW_VERSION_MINOR 0)
set (UBW_VERSION_PATCH 0)

set(CMAKE_PREFIX_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_PREFIX_PATH})

set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=c11 -pedantic")
set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")

include_directories (
	"${PROJECT_SOURCE_DIR}"
	"${PROJECT_BINARY_DIR}" )

# * Configuration

# ** Reader

set(UBW_READER_STACK_SIZE 256 CACHE STRING
  "The default stack length of the reader.  This is equivalent to the maximum list nesting level.")

# ** Lisp

set(UBW_LISP_TYPES_INT_TYPE "long int" CACHE string
  "C type of Lisp integers")

set(UBW_LISP_TYPES_FLOAT_TYPE "double" CACHE string
  "C type of Lisp floats")

set(UBW_LISP_TYPES_CHAR_TYPE "int_least32_t" CACHE string
  "C type of Lisp chars.")

set(UBW_LISP_MAX_SYMBOL_LENGTH 512 CACHE STRING
  "Maximum length, in characters, of a symbol.")

# ** Heap

set(UBW_HEAP_MAX_FRAGMENTATION 128 CACHE STRING
  "Size of the symbols table.  This is the maximum number of symbols that can be interned.")

# ** Symbol table

set(UBW_STBL_SIZE 1024 CACHE STRING
  "Size of the symbols table.  This is the maximum number of symbols that can be interned.")

set(UBW_STBL_ID_TYPE int CACHE STRING
  "Size of the symbols table.  This is the maximum number of symbols that can be interned.")

set(UBW_STBL_HASH_SIZE 64 CACHE STRING
  "Size of symbol hashes.")

set (UBW_STBL_HASH_FUNC "fnv1" CACHE STRING
  "The symbol hash algorithm.")

set(UBW_EPH_STORE_SIZE 1024 CACHE STRING
  "Size of the reader's ephemeral store. ")

# * Intermediate products

# ** config.h

set(UBW_CONFIG_HEADER "${PROJECT_BINARY_DIR}/config.h")

configure_file (
	"${PROJECT_SOURCE_DIR}/src/config.h.in"
  ${UBW_CONFIG_HEADER})

# * Targets

# ** Library

set (UBW_LIB_SOURCE_DIR ${PROJECT_SOURCE_DIR}/src)
include_directories(${UBW_LIB_SOURCE_DIR})

set (UBW_LIB_SOURCES
  ${UBW_LIB_SOURCE_DIR}/eval.c
  ${UBW_LIB_SOURCE_DIR}/heap.c
  ${UBW_LIB_SOURCE_DIR}/object.c
  ${UBW_LIB_SOURCE_DIR}/print.c
  ${UBW_LIB_SOURCE_DIR}/read.c
  ${UBW_LIB_SOURCE_DIR}/stack.c
  ${UBW_LIB_SOURCE_DIR}/stbl.c)

set (UBW_LIB_HEADERS
  ${UBW_CONFIG_HEADER}
  ${UBW_LIB_SOURCE_DIR}/env.h
  ${UBW_LIB_SOURCE_DIR}/eval.h
  ${UBW_LIB_SOURCE_DIR}/heap.h
  ${UBW_LIB_SOURCE_DIR}/object.h
  ${UBW_LIB_SOURCE_DIR}/print.h
  ${UBW_LIB_SOURCE_DIR}/read.h
  ${UBW_LIB_SOURCE_DIR}/runtime.h
  ${UBW_LIB_SOURCE_DIR}/stack.h
  ${UBW_LIB_SOURCE_DIR}/stbl.h
  ${UBW_LIB_SOURCE_DIR}/uberwald.h
  ${UBW_CONTAINERS_SRC})

add_library(dylib SHARED
  ${UBW_LIB_SOURCES}
  ${UBW_LIB_HEADERS})

target_compile_definitions(dylib PRIVATE -DUBW_EXPOSE_INTERNALS)

set_target_properties(dylib PROPERTIES OUTPUT_NAME "uberwald")

# ** Tests

set (UBW_TESTS_SOURCE_DIR ${PROJECT_SOURCE_DIR}/tests)

find_package(Check REQUIRED)
enable_testing()
include_directories(${CHECK_INCLUDE_DIRS})

set(UBW_TESTS_SOURCES ${UBW_TESTS_SOURCE_DIR}/main.c
  ${UBW_TESTS_SOURCE_DIR}/stack_test.c
  ${UBW_TESTS_SOURCE_DIR}/object_test.c
  ${UBW_TESTS_SOURCE_DIR}/read_test.c
  ${UBW_TESTS_SOURCE_DIR}/stbl_test.c)

add_executable(tests ${UBW_TESTS_SOURCES})

target_compile_definitions(tests PRIVATE -DUBW_EXPOSE_INTERNALS)

target_link_libraries(tests dylib)
target_link_libraries(tests ${CHECK_LIBRARIES})

add_test(tests ${CMAKE_CURRENT_BINARY_DIR}/tests)

# ** CLI Executable

set (UBW_CLI_SOURCE_DIR ${PROJECT_SOURCE_DIR}/src/cli)

find_package(Readline REQUIRED)

set (UBW_CLI_SOURCES ${UBW_CLI_SOURCE_DIR}/cli.c)

add_executable(cli ${UBW_CLI_SOURCES}
    ${UBW_LIB_HEADERS})

SET_TARGET_PROPERTIES(cli PROPERTIES OUTPUT_NAME "uberwald")
target_link_libraries(cli dylib)
target_link_libraries(cli ${READLINE_LIBRARIES})

# ** Hash benchmark

set (UBW_HASHBENCH_SOURCE_DIR ${PROJECT_SOURCE_DIR}/hashbench)

set (UBW_HASHBENCH_SOURCES ${UBW_HASHBENCH_SOURCE_DIR}/hashbench.c
  ${UBW_HASHBENCH_SOURCE_DIR}/hashwords.c)

add_executable(hashbench ${UBW_HASHBENCH_SOURCES}
    ${UBW_HASHBENCH_HEADERS})

target_compile_definitions(hashbench PRIVATE -DUBW_EXPOSE_INTERNALS)
target_link_libraries(hashbench dylib)

set_target_properties(hashbench PROPERTIES EXCLUDE_FROM_ALL YES)

# ** Manual

# The manual is generated using Sphinx with Breathe, which
# uses Doxygen to parse in-source code documentation.  This target is two fold

# *** Doxygen intermediate target

if(NOT CMAKE_VERSION VERSION_GREATER_EQUAL 3.9)
  message(WARNING "Documentation generation requires CMake >= 3.9.  Dropping this target.")
else()
  set (DOXYGEN_GENERATE_HTML YES)
  set (DOXYGEN_GENERATE_XML YES)

  set (DOXYGEN_EXTRACT_PRIVATE YES)
  set (DOXYGEN_PROJECT_NUMBER "${UBW_VERSION_MAJOR}.${UBW_VERSION_MINOR}.${UBW_VERSION_PATCH}")

  set (DOXYGEN_SOURCE_BROWSER YES)

  set (DOXYGEN_MACRO_EXPANSION YES)
  set (DOXYGEN_EXPAND_ONLY_PREDEF YES)
  # Support macros for Check and internals
  set (DOXYGEN_PREDEFINED "\"START_TEST(name)=void name(int i)\""
    "END_TEST=1" \n
    "UBW_EXPOSE_INTERNALS=1"
    )

  find_package(Doxygen QUIET)

  if(NOT ${Doxygen_FOUND})
    message(WARNING "Doxygen NOT FOUND, dropping documentation target.")
  else()
    doxygen_add_docs(doxygen ${UBW_LIB_HEADERS}
      ${UBW_LIB_SOURCES}
      ${UBW_CLI_SOURCES}
      ${UBW_TESTS_SOURCES}
      ${UBW_CLI_SOURCES})
  endif()
endif()

# *** Sphinx final target

set (UBW_DOC_DIR ${PROJECT_SOURCE_DIR}/doc)

find_package(Sphinx QUIET)

if(NOT ${Sphinx_FOUND})
  message(WARNING "Sphinx NOT FOUND, dropping documentation target.")
else()
  add_custom_target(doc
    COMMAND ${SPHINX_EXECUTABLE} -b html ${UBW_DOC_DIR} ${PROJECT_BINARY_DIR}/doc
    DEPENDS doxygen)
endif()

# ** TAGS

# (set UBW_TAGS ${CMAKE_SOURCE_DIR}/TAGS)

# set_source_files_properties(${UBW_TAGS} PROPERTIES GENERATED true)
#add_custom_target(${UBW_TAGS}
#     COMMAND ctags -e -R --c++-kinds=+p --fields=+iaS --extra=+q .
#    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
